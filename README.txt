*****************************OBJECT DETECTION PROGRAM*****************************************

This program allows users to detect objects using a YOLO model and estimate their distance and angle from the camera in real time. 
It also includes a graphical user interface (GUI) for ease of use.

-----Features------

#Real-time object detection using YOLO and tracking the object.

#Distance and angle estimation for detected objects.

#GUI for selecting object classes to detect.

#User authentication through ID card or password verification.


-----Prerequisites------
Software Requirements
#Python 3.8 or later.

Required Python libraries:
#OpenCV (cv2)
#NumPy (numpy)
#Tkinter (comes pre-installed with Python)
#PIL (pillow)
#Ultralyics YOLO (ultralytics)

Install these libraries using pip:
pip install opencv-python numpy pillow ultralytics

Hardware Requirements
A camera or a webcam for real-time object detection.

Files and Directories
A trained YOLO model weight file (best.pt). Adjust the path in the code to the correct location of your YOLO weight file.
Ensure the CLASS_WIDTHS dictionary is updated with the appropriate widths of the objects you want to detect (in centimeters).

Methodology
Two methods were explored for calculating the distance and angle of detected objects:
Using Focal Length:
This method calculates the distance based on the real-world width of the object, its perceived width in the image, and the camera's focal length.
The angle is computed relative to the center of the camera's field of view.
This method was successful and chosen for the final implementation.

Using MiDaS (Monocular Depth Estimation):
This method relies on depth maps generated by the MiDaS model to estimate the distance of objects.
While promising, this approach was less reliable in this use case, leading to the decision to proceed with the focal length method.
The implementation explained below uses the focal length and the real widths of the objects for distance and angle estimation.
Note: The approach using MiDaS for distance estimation can be seen in the branch named 'Midas'. This branch includes codes and commits 
that show our progression. However, we ultimately chose the focal length method as the final implementation.


The implementation explained below uses the focal length and the real widths of the objects for distance and angle estimation.

*******************************RUNNING THE PROGRAM***********************************************
Step 1: Setup
Clone or download the repository containing the script.

Step 2: Run the Script
Execute the script:
python Distance_with_Focal_length_method.py

Step 3: Verify Access
ID Card Verification:
Hold admin's ID card in front of the camera that matches the ACCESS_ID class in the YOLO model.
If the admin's ID card is not available, then login using the password.
Password Verification:
Enter the password in the provided text box. The default password is mdx2024.

Step 4: Select Object Classes
In the main program screen, select the objects you want to detect by checking the corresponding boxes. (It is possible continue without selecting any)

Step 5: Start Detection
Click the Start Detection button to begin detecting objects in real-time.
The detected objects' distance (in cm) and angle (in degrees) will be displayed below the video feed.

Step 6: Testing Object Classes
Select and deselect the corresponding boxes of different objects to detect and see the distance and the angle. It can detect all the five objects at a time or even none.

Step 7: Stop Detection
Click the Stop Detection button to end the detection process.


Contribution
This program was built as part of Middlesex University Artificial Intelligence PDE 3802 - Assessment. It was a group project involving two members, Lakshan and Sebastian.

Responsibilities
Lakshan:
Mainly responsible for the coding and implementation of the program.
Conducted research and created the user interface for the program.
Came up with the idea of using the focal length for distance estimation and developed the final method.
Performed program testing and evaluation.

Sebastian:
Focused on research, exploring different methods to optimize the system.
Contributed to data labeling for training the model.
Collaborated on program development.


Additional information about the files in this repository
Cam_calibration.py is used for camera calibration using checkerboard
Focal_length_calculation.py is used to calculate the focal length using known width and known distance of an object
Object_detection_test.py is used to test whether the YOLO model is working properly

Credits
This program uses the YOLO model provided by Ultralytics and leverages OpenCV for video processing.

